// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cart component should match snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="cart-container"
  >
    <ReactSVG
      className="cart-close-wrapper"
      evalScripts="never"
      fallback={null}
      loading={null}
      onInjected={[Function]}
      renumerateIRIElements={true}
      src="close.svg"
      svgClassName="cart-close-icon"
      svgStyle={Object {}}
      wrapper="div"
    />
    <h3
      className="cart-title"
    >
      Your Cart
    </h3>
    <hr
      className="divider"
    />
    <div
      className="cart-content-wrapper"
    >
      <div
        className="cart-content"
      >
        <Product
          addToCart={[Function]}
          inCart={true}
          price={9.99}
          quantity={1}
          quantityInputHandler={[Function]}
          removeProductFromCart={[Function]}
          title="Product 1"
        />
      </div>
      <CartCheckout
        onCheckoutClicked={[MockFunction]}
        total="9.99"
      />
    </div>
  </div>,
  "nodes": Array [
    <div
      className="cart-container"
    >
      <ReactSVG
        className="cart-close-wrapper"
        evalScripts="never"
        fallback={null}
        loading={null}
        onInjected={[Function]}
        renumerateIRIElements={true}
        src="close.svg"
        svgClassName="cart-close-icon"
        svgStyle={Object {}}
        wrapper="div"
      />
      <h3
        className="cart-title"
      >
        Your Cart
      </h3>
      <hr
        className="divider"
      />
      <div
        className="cart-content-wrapper"
      >
        <div
          className="cart-content"
        >
          <Product
            addToCart={[Function]}
            inCart={true}
            price={9.99}
            quantity={1}
            quantityInputHandler={[Function]}
            removeProductFromCart={[Function]}
            title="Product 1"
          />
        </div>
        <CartCheckout
          onCheckoutClicked={[MockFunction]}
          total="9.99"
        />
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Cart
        onCheckoutClicked={[MockFunction]}
        products={
          Array [
            Object {
              "id": 1,
              "price": 9.99,
              "quantity": 1,
              "title": "Product 1",
            },
          ]
        }
        total="9.99"
      />,
      "_debugID": 9,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onCheckoutClicked": [MockFunction],
          "products": Array [
            Object {
              "id": 1,
              "price": 9.99,
              "quantity": 1,
              "title": "Product 1",
            },
          ],
          "total": "9.99",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 5,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="cart-container"
        >
          <ReactSVG
            className="cart-close-wrapper"
            evalScripts="never"
            fallback={null}
            loading={null}
            onInjected={[Function]}
            renumerateIRIElements={true}
            src="close.svg"
            svgClassName="cart-close-icon"
            svgStyle={Object {}}
            wrapper="div"
          />
          <h3
            className="cart-title"
          >
            Your Cart
          </h3>
          <hr
            className="divider"
          />
          <div
            className="cart-content-wrapper"
          >
            <div
              className="cart-content"
            >
              <Product
                addToCart={[Function]}
                inCart={true}
                price={9.99}
                quantity={1}
                quantityInputHandler={[Function]}
                removeProductFromCart={[Function]}
                title="Product 1"
              />
            </div>
            <CartCheckout
              onCheckoutClicked={[MockFunction]}
              total="9.99"
            />
          </div>
        </div>,
        "_debugID": 10,
        "_renderedOutput": <div
          className="cart-container"
        >
          <ReactSVG
            className="cart-close-wrapper"
            evalScripts="never"
            fallback={null}
            loading={null}
            onInjected={[Function]}
            renumerateIRIElements={true}
            src="close.svg"
            svgClassName="cart-close-icon"
            svgStyle={Object {}}
            wrapper="div"
          />
          <h3
            className="cart-title"
          >
            Your Cart
          </h3>
          <hr
            className="divider"
          />
          <div
            className="cart-content-wrapper"
          >
            <div
              className="cart-content"
            >
              <Product
                addToCart={[Function]}
                inCart={true}
                price={9.99}
                quantity={1}
                quantityInputHandler={[Function]}
                removeProductFromCart={[Function]}
                title="Product 1"
              />
            </div>
            <CartCheckout
              onCheckoutClicked={[MockFunction]}
              total="9.99"
            />
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Cart
    onCheckoutClicked={[MockFunction]}
    products={
      Array [
        Object {
          "id": 1,
          "price": 9.99,
          "quantity": 1,
          "title": "Product 1",
        },
      ]
    }
    total="9.99"
  />,
}
`;
