// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductWrapper component should match snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="product-wrapper"
  >
    <img
      alt="test"
      className="product-image"
      src="NotFound.jpg"
    />
    <div
      className="product-info-wrapper"
    >
      <div
        className="product-info"
      >
        <Product
          inventory={6}
          price={9.99}
          title="Product 1"
        />
        <button
          className="product-action"
          disabled=""
          onClick={[MockFunction]}
        >
          ADD TO CART
        </button>
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="product-wrapper"
    >
      <img
        alt="test"
        className="product-image"
        src="NotFound.jpg"
      />
      <div
        className="product-info-wrapper"
      >
        <div
          className="product-info"
        >
          <Product
            inventory={6}
            price={9.99}
            title="Product 1"
          />
          <button
            className="product-action"
            disabled=""
            onClick={[MockFunction]}
          >
            ADD TO CART
          </button>
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <ProductWrapper
        onAddToCartClicked={[MockFunction]}
        product={
          Object {
            "inventory": 6,
            "price": 9.99,
            "title": "Product 1",
          }
        }
      />,
      "_debugID": 9,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onAddToCartClicked": [MockFunction],
          "product": Object {
            "inventory": 6,
            "price": 9.99,
            "title": "Product 1",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 5,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="product-wrapper"
        >
          <img
            alt="test"
            className="product-image"
            src="NotFound.jpg"
          />
          <div
            className="product-info-wrapper"
          >
            <div
              className="product-info"
            >
              <Product
                inventory={6}
                price={9.99}
                title="Product 1"
              />
              <button
                className="product-action"
                disabled=""
                onClick={[MockFunction]}
              >
                ADD TO CART
              </button>
            </div>
          </div>
        </div>,
        "_debugID": 10,
        "_renderedOutput": <div
          className="product-wrapper"
        >
          <img
            alt="test"
            className="product-image"
            src="NotFound.jpg"
          />
          <div
            className="product-info-wrapper"
          >
            <div
              className="product-info"
            >
              <Product
                inventory={6}
                price={9.99}
                title="Product 1"
              />
              <button
                className="product-action"
                disabled=""
                onClick={[MockFunction]}
              >
                ADD TO CART
              </button>
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ProductWrapper
    onAddToCartClicked={[MockFunction]}
    product={
      Object {
        "inventory": 6,
        "price": 9.99,
        "title": "Product 1",
      }
    }
  />,
}
`;
